name: Continuous Integration

on:
  push:
    branches:
    - master
    tags:
    - '*'
  pull_request:

# SECRETS
# - GH_RELEASE_NOTES_TOKEN: personal access token of `rasabot` github account
#                           (login for account in 1pw)
# - SLACK_WEBHOOK_TOKEN: token to post to RasaHQ slack account (in 1password)
# - PYPI_TOKEN: publishing token for amn41 account, needs to be maintainer of
#               RasaHQ/rasa on pypi (account credentials in 1password)
# - DOCKERHUB_PASSWORD: password for an account with write access to the rasa
#                       repo on hub.docker.com. used to pull and upload containers
# - RASA_OSS_TELEMETRY_WRITE_KEY: key to write to segment. Used to report telemetry.
#                                 The key will be added to the distributions
# - RASA_OSS_EXCEPTION_WRITE_KEY: key to write to sentry. Used to report exceptions.
#                                 The key will be added to the distributions.
#                                 Key can be found at https://sentry.io/settings/rasahq/projects/rasa-open-source/install/python/
# - SENTRY_AUTH_TOKEN: authentication used to tell Sentry about any new releases
#                      created at https://sentry.io/settings/account/api/auth-tokens/

env:
  # needed to fix issues with boto during testing:
  # https://github.com/travis-ci/travis-ci/issues/7940
  BOTO_CONFIG: /dev/null

jobs:
  changes:
    name: Check for file changes
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      docker: ${{ steps.filter.outputs.docker }}
      docs: ${{ steps.filter.outputs.docs }}
    steps:
      - uses: actions/checkout@v2
      - uses: RasaHQ/pr-changed-files-filter@c4f7116a04b8a4596313469429e2ad235f59d9c4
        id: filter
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filters: .github/change_filters.yml

  documentation:
    name: Test Documentation
    runs-on: ubuntu-latest
    needs: [changes]

    steps:
    - name: Checkout git repository üïù
      if: needs.changes.outputs.docs == 'true'
      uses: actions/checkout@v2

    - name: Set up Python 3.7 üêç
      if: needs.changes.outputs.docs == 'true'
      uses: actions/setup-python@v1
      with:
        python-version: 3.7

    - name: Set up Node 12.x ü¶ô
      if: needs.changes.outputs.docs == 'true'
      uses: actions/setup-node@v1
      with:
        node-version: '12.x'

    - name: Read Poetry Version üî¢
      if: needs.changes.outputs.docs == 'true'
      run: |
        echo "POETRY_VERSION=$(scripts/poetry-version.sh)" >> $GITHUB_ENV
      shell: bash

    - name: Install poetry ü¶Ñ
      if: needs.changes.outputs.docs == 'true'
      uses: Gr1N/setup-poetry@v4
      with:
        poetry-version: ${{ env.POETRY_VERSION }}

    - name: Load Poetry Cached Libraries ‚¨á
      if: needs.changes.outputs.docs == 'true'
      uses: actions/cache@v1
      with:
        path: ~/.cache/pypoetry/virtualenvs
        key: ${{ runner.os }}-poetry-${{ env.POETRY_VERSION }}-3.7-${{ hashFiles('**/poetry.lock') }}
        restore-keys: ${{ runner.os }}-poetry-3.7

    - name: Load Yarn Cached Packages ‚¨á
      if: needs.changes.outputs.docs == 'true'
      uses: actions/cache@v1
      with:
        path: docs/node_modules
        key: ${{ runner.os }}-yarn-12.x-${{ hashFiles('docs/yarn.lock') }}
        restore-keys: ${{ runner.os }}-yarn-12.x

    - name: Install Dependencies üì¶
      if: needs.changes.outputs.docs == 'true'
      run: |
        sudo apt-get -y install libpq-dev
        make install-full install-docs

    - name: Run Swagger üïµÔ∏è‚Äç‚ôÄÔ∏è
      if: needs.changes.outputs.docs == 'true'
      run: |
        npm install -g swagger-cli
        swagger-cli validate docs/static/spec/action-server.yml
        swagger-cli validate docs/static/spec/rasa.yml

    - name: Test Docs üï∏
      if: needs.changes.outputs.docs == 'true'
      run: make test-docs

  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: [changes]

    steps:
    - name: Checkout git repository üïù
      if: needs.changes.outputs.backend == 'true'
      uses: actions/checkout@v2

    - name: Set up Python 3.7 üêç
      if: needs.changes.outputs.backend == 'true'
      uses: actions/setup-python@v1
      with:
        python-version: 3.7

    - name: Read Poetry Version üî¢
      if: needs.changes.outputs.backend == 'true'
      run: |
        echo "POETRY_VERSION=$(scripts/poetry-version.sh)" >> $GITHUB_ENV
      shell: bash

    - name: Install poetry ü¶Ñ
      if: needs.changes.outputs.backend == 'true'
      uses: Gr1N/setup-poetry@v4
      with:
        poetry-version: ${{ env.POETRY_VERSION }}

    - name: Load Poetry Cached Libraries ‚¨á
      if: needs.changes.outputs.backend == 'true'
      uses: actions/cache@v1
      with:
        path: ~/.cache/pypoetry/virtualenvs
        key: ${{ runner.os }}-poetry-${{ env.POETRY_VERSION }}-3.7-${{ hashFiles('**/poetry.lock') }}
        restore-keys: ${{ runner.os }}-poetry-3.7

    - name: Install Dependencies üì¶
      if: needs.changes.outputs.backend == 'true'
      run: |
        sudo apt-get -y install libpq-dev
        make install-full

    - name: Checkout target branch to be able to diff
      if: needs.changes.outputs.backend == 'true' && github.event_name == 'pull_request'
      run: |
        git fetch origin ${{ github.base_ref }}
        echo "DOCSTRING_DIFF_BRANCH=origin/${{ github.base_ref }}" >> $GITHUB_ENV

        # Fetch entire history for current branch so that `make lint-docstrings`
        # can calculate the proper diff between the branches
        git fetch --unshallow origin "${{ github.ref }}"

    - name: Lint Code üéé
      if: needs.changes.outputs.backend == 'true'
      run: |
        # If it's not a pull request, $DOCSTRING_DIFF_BRANCH is unset.
        # This will result in an empty diff, which effictively means that
        # make lint-docstrings will be skipped for other events than `pull_request`
        make lint BRANCH=$DOCSTRING_DIFF_BRANCH

    - name: Check Types üìö
      if: needs.changes.outputs.backend == 'true'
      run: make types

    - name: Test CLI üñ•
      if: needs.changes.outputs.backend == 'true'
      # makes sure we catch any dependency error early. they will create strange
      # errors during the docs build, so easier to catch them early on by
      # trying to run the `rasa` command once before the docs build.
      run: poetry run rasa --help

  test:
    name: Run Tests
    runs-on: ${{ matrix.os }}
    needs: [changes]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: [3.6, 3.7, 3.8]

    steps:
    - name: Checkout git repository üïù
      if: needs.changes.outputs.backend == 'true'
      uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }} üêç
      if: needs.changes.outputs.backend == 'true'
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Read Poetry Version üî¢
      if: needs.changes.outputs.backend == 'true'
      run: |
        echo "POETRY_VERSION=$(scripts/poetry-version.sh)" >> $GITHUB_ENV
      shell: bash

    - name: Install poetry ü¶Ñ
      if: needs.changes.outputs.backend == 'true'
      uses: Gr1N/setup-poetry@v4
      with:
        poetry-version: ${{ env.POETRY_VERSION }}

    - name: Set up virtual environment
      if: needs.changes.outputs.backend == 'true'
      # Poetry on Windows cannot pick up the virtual environments directory properly,
      # and it creates a new one every time the pipeline runs.
      # We want to  allow Poetry to create a venv directory if it doesn't
      # exist, but also pick it up if it's already there.
      # This step solves this problem ‚Äî¬†it tells poetry to always use `.venv` directory inside
      # the project itself, which also makes it easier for us to determine the correct directory
      # that needs to be cached.
      run: |
        poetry config virtualenvs.in-project true

    - name: Load Poetry Cached Libraries ‚¨á
      if: needs.changes.outputs.backend == 'true' && matrix.os != 'windows-latest'
      uses: actions/cache@v1
      with:
        path: .venv
        key: ${{ runner.os }}-poetry-${{ env.POETRY_VERSION }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install Dependencies (Linux) üì¶
      if: needs.changes.outputs.backend == 'true' && matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get -y install libpq-dev
        make install-full | tee .output
        if grep 'The lock file is not up to date' .output; then exit 1; fi
        make prepare-tests-ubuntu

    - name: Install Dependencies (Windows) üì¶
      if: needs.changes.outputs.backend == 'true' && matrix.os == 'windows-latest'
      # Restoring cache doesn't work properly on Windows due to symlinks.
      # We create symlinks for spacy models, that's why we need to clean them up
      # before caching the dependencies directory.
      # More information: https://github.com/actions/cache/issues/120
      run: |
        $spacy_data_dir = ".venv\lib\site-packages\spacy\data"
        if (Test-Path $spacy_data_dir) {
          Get-ChildItem -Force -ErrorAction Stop $spacy_data_dir | Where-Object { if($_.Attributes -match "ReparsePoint"){$_.Delete()} }
          Remove-Item -Force -Recurse $spacy_data_dir
          New-Item -Path $spacy_data_dir -Type Directory
        }
        make install-full
        make prepare-tests-windows

    - name: Test Code üîç
      if: needs.changes.outputs.backend == 'true'
      env:
        JOBS: 2
        PYTHONIOENCODING: "utf-8"
      run: |
        make test

    - name: Send Coverage Report üìä
      if: needs.changes.outputs.backend == 'true' && matrix.python-version == 3.6 && matrix.os != 'windows-latest'
      env:
        COVERALLS_REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        COVERALLS_SERVICE_NAME: github
      run: poetry run coveralls

  docker:
    name: Build Docker
    runs-on: ubuntu-latest
    needs: [changes]

    strategy:
      matrix:
        image:
          - {"file": "Dockerfile", "tag_ext": ""}
          - {"file": "docker/Dockerfile_full", "tag_ext": "-full"}
          - {"file": "docker/Dockerfile_pretrained_embeddings_mitie_en", "tag_ext": "-mitie-en"}
          - {"file": "docker/Dockerfile_pretrained_embeddings_spacy_de", "tag_ext": "-spacy-de"}
          - {"file": "docker/Dockerfile_pretrained_embeddings_spacy_en", "tag_ext": "-spacy-en"}

    env:
      DOCKERHUB_USERNAME: tmbo

    steps:
    - name: Checkout git repository üïù
      if: needs.changes.outputs.docker == 'true'
      uses: actions/checkout@v2

    - name: Free disk space
      if: needs.changes.outputs.docker == 'true'
      # tries to make sure we do not run out of disk space, see
      # https://github.community/t5/GitHub-Actions/BUG-Strange-quot-No-space-left-on-device-quot-IOExceptions-on/td-p/46101
      run: |
        sudo swapoff -a
        sudo rm -f /swapfile
        sudo apt clean
        docker rmi $(docker image ls -aq)
        df -h

    - name: Login to DockerHub Registry üî¢
      if: needs.changes.outputs.docker == 'true'
      run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ env.DOCKERHUB_USERNAME }} --password-stdin || true

    - name: Pull latest${{ matrix.image.tag_ext }} Docker image for caching
      if: needs.changes.outputs.docker == 'true'
      run: docker pull rasa/rasa:latest${{ matrix.image.tag_ext }} || true

    - name: Copy Segment write key to the package
      if: needs.changes.outputs.docker == 'true' && github.event_name == 'push' && startsWith(github.ref, 'refs/tags') && github.repository == 'RasaHQ/rasa'
      env:
        RASA_TELEMETRY_WRITE_KEY: ${{ secrets.RASA_OSS_TELEMETRY_WRITE_KEY }}
        RASA_EXCEPTION_WRITE_KEY: ${{ secrets.RASA_OSS_EXCEPTION_WRITE_KEY }}
      run: |
        ./scripts/write_keys_file.sh

    - name: Build latest${{ matrix.image.tag_ext }} Docker image
      if: needs.changes.outputs.docker == 'true'
      run: docker build . --file ${{ matrix.image.file }} --tag rasa/rasa:latest${{ matrix.image.tag_ext }} --cache-from rasa/rasa:latest${{ matrix.image.tag_ext }}

    - name: Push image with latest tag üì¶
      if: needs.changes.outputs.docker == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/master' && github.repository == 'RasaHQ/rasa'
      run: docker push rasa/rasa:latest${{ matrix.image.tag_ext }}

    - name: Push image with ${{github.ref}} tag üì¶
      env:
        GITHUB_TAG: ${{ github.ref }}
      if: needs.changes.outputs.docker == 'true' && github.event_name == 'push' && startsWith(github.ref, 'refs/tags') && github.repository == 'RasaHQ/rasa'
      run: |
        GITHUB_TAG=${GITHUB_TAG/refs\/tags\//}
        docker tag rasa/rasa:latest${{ matrix.image.tag_ext }} rasa/rasa:${GITHUB_TAG}${{ matrix.image.tag_ext }}
        docker push rasa/rasa:${GITHUB_TAG}${{ matrix.image.tag_ext }}

  deploy:
    name: Deploy to PyPI
    runs-on: ubuntu-latest

    # deploy will only be run when there is a tag available
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags') && github.repository == 'RasaHQ/rasa'
    needs: [quality, test, documentation, docker]  # only run after all other stages succeeded

    steps:
    - name: Checkout git repository üïù
      uses: actions/checkout@v2

    - name: Set up Python 3.6 üêç
      uses: actions/setup-python@v1
      with:
        python-version: 3.6

    - name: Read Poetry Version üî¢
      run: |
        echo "POETRY_VERSION=$(scripts/poetry-version.sh)" >> $GITHUB_ENV
      shell: bash

    - name: Install poetry ü¶Ñ
      uses: Gr1N/setup-poetry@v4
      with:
        poetry-version: ${{ env.POETRY_VERSION }}

    - name: Copy Segment write key to the package
      env:
        RASA_TELEMETRY_WRITE_KEY: ${{ secrets.RASA_OSS_TELEMETRY_WRITE_KEY }}
        RASA_EXCEPTION_WRITE_KEY: ${{ secrets.RASA_OSS_EXCEPTION_WRITE_KEY }}
      run: |
        ./scripts/write_keys_file.sh

    - name: Build ‚öíÔ∏è Distributions
      run: poetry build

    - name: Publish to PyPI üì¶
      uses: pypa/gh-action-pypi-publish@37e305e7413032d8422456179fee28fac7d25187
      with:
        user: __token__
        password: ${{ secrets.PYPI_TOKEN }}

    - name: Notify Sentry about the release
      env:
        GITHUB_TAG: ${{ github.ref }}
        SENTRY_ORG: rasahq
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      run: |
        curl -sL https://sentry.io/get-cli/ | bash
        GITHUB_TAG=${GITHUB_TAG/refs\/tags\//}
        sentry-cli releases new -p rasa-open-source "rasa-$GITHUB_TAG"
        sentry-cli releases set-commits --auto "rasa-$GITHUB_TAG"
        sentry-cli releases finalize "rasa-$GITHUB_TAG"

    - name: Notify Slack & Publish Release Notes üóû
      env:
        GH_RELEASE_NOTES_TOKEN: ${{ secrets.GH_RELEASE_NOTES_TOKEN }}
        SLACK_WEBHOOK_TOKEN: ${{ secrets.SLACK_WEBHOOK_TOKEN }}
        GITHUB_TAG: ${{ github.ref }}
        GITHUB_REPO_SLUG: ${{ github.repository }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        GITHUB_TAG=${GITHUB_TAG/refs\/tags\//}
        pip install -U github3.py pep440-version-utils
        python3 scripts/publish_gh_release_notes.py
        ./scripts/ping_slack_about_package_release.sh

  mergepal-merge: # run merge pal in the end
    runs-on: ubuntu-latest
    needs: [quality, test, documentation, docker]
    steps:
      - uses: actions/checkout@v1
      - name: Make sure there is a github token
        shell: bash
        run: |
          if [ -z "${{ secrets.RASABOT_AUTOMERGE_GITHUB_TOKEN }}" ]; then
            echo "MERGE_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
          else
            echo "MERGE_TOKEN=${{ secrets.RASABOT_AUTOMERGE_GITHUB_TOKEN }}" >> $GITHUB_ENV
          fi
      - uses: rasahq/merge-pal-action@master
        with:
          token: ${{ env.MERGE_TOKEN }}
